(* ========================================================================= *)
(* This file contains some exercises based on chapters 3--9 of Harrison's    *)
(* HOL Light Tutorial                                                        *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Questo file contiene una lista di esempi di istruzioni OCaml/HOL.         *)
(* Gli esempi proposti sono suddivisi seguendo la struttura del Tutorial.    *)
(*                                                                           *)
(* Per ciascuna di esse rispondere alle seguenti domande:                    *)
(*  - Qual e' il risultato dei seguenti comandi e perche'?                   *)
(*  - Qual e' il tipo OCaml (term, thm, etc.) del risultato?                 *)
(*  - In quali casi viene prodotto un errore e quale tipo di errore?         *)
(*  - In quali casi viene prodotto uno di errore                             *)
(*      "typechecking error (cannot infer type of variables)"                *)
(*    o un avvertimento                                                      *)
(*      "Warning: inventing type variables" ?                                *)
(*                                                                           *)
(* Verificare le risposte inserendo i comandi in HOL solo DOPO aver risposto *)
(* a ciascuna domanda.                                                       *)
(* ------------------------------------------------------------------------- *)


(* ========================================================================= *)
(* 3. HOL Basics                                                             *)
(* ========================================================================= *)

let expected = `b = T` in
let true = expected = subst [`T`,`F`] `b = F` in ();;

let expected = `a + a` in
let true = expected = subst [`a:num`,`1`] `1+1` in ();;

(*
 In the following we do not check by pattern matching since invented type 
 variables are different each time .
 *)
type_of `2+2`;;
type_of `(a, (a < b))`;;
type_of `x:num = y`;;
type_of `x = y`;;
type_of `x:A`;; (* `:A` *)
type_of `x`;;
type_of `% x`;;
type_of `% x = y`;;
type_of `% (f x) + 1`;;
type_of `% f (x + 1)`;;
type_of `f (x + 1):A`;;

(* ------------------------------------------------------------------------- *)
(* Dove serve, inserire le annotazioni di tipo mancanti per evitare l'errore *)
(* Exception: Failure "typechecking error (cannot infer type of variables)". *)
(* Dove appropriato inserire variabili di tipo come `:A`, `:B` etc. per      *)
(* indicare tipi generici.                                                   *)
(* ------------------------------------------------------------------------- *)

ASSUME `1+1=0`;;
ASSUME `(x + 1) `;; (* not a proposition *)
ASSUME `p:bool`;;
ASSUME `p:A`;; (* not a proposition *)
ASSUME `p`;; (* not a proposition *)
ASSUME `f x : bool`;;
ASSUME `f (x:A)`;; (* not a proposition *)

REFL `0`;;
REFL `x:A`;;
REFL `x`;; (* invented type variable *)
REFL 0;; (* 0 isn't a hol term *)
REFL `0 = 0`;;

INST [`1`, `x:num`] (REFL `x + 1`);;
INST [`1`, `x:real`] (ASSUME `x + 1 = 0`);; (* bad substitution list: `1:num` while `x:real` *)
INST [`1`, `x:num`] (ASSUME `x + 1 = 0`);;  (* thm = 1 + 1 = 0 |- 1 + 1 = 0  *)
INST [`&1`, `x:real`] (ASSUME `x + 1 = 0`);; (* thm = x + 1 = 0 |- x + 1 = 0 , no instantiation while substitution list okay! *)
INST [`y:real`, `x:real`] (ASSUME `x = 0`);; (* again, no instantiation *)
let term_zero = (rand (concl (ASSUME `x = 0`))) in ()
type_of (rand (rand (concl (ASSUME `x = 0`))));; (* `x` has type `:num` *)

INST [`y:real`, `x:real`] (ASSUME `x = y`);; (* again, no instantiation *)
INST [`y:real`, `x:real`] (ASSUME `x:A = y`);; (* again, no instantiation *)
INST [`y:real`, `x:real`] (ASSUME `x:real = y`);;  
(* type_of (rand (rand (concl (INST [`y:real`, `x:real`] (ASSUME `x = y`)))));; (* `x` has type `:real` *) *)
INST [`x+1`, `x+1`] (REFL `x + 1`);; (* bad substitution list: attempting to substitute non-free variable, ie a combination *)
INST [`y:num `, `x:num`] (REFL `x + 1`);; 
INST [`76`, `x:num`] (REFL `x + 1`);; 
INST [`76`, `x:num + 1`] (REFL `x + 1`);; (* bad substitution, again applied to non-free variable *)
INST [`2`, `x:num`] `x+1`;; (* type checking error: `x + 1` is not a theorem *)

concl (REFL `x+1`);;
concl (ASSUME `x=0`);;
type_of (concl (REFL `0`));;
type_of (REFL `0`);; (* type checking error, a theorem hasn't a type in hol because isn't a term *)

ARITH_RULE `x - x - 1 = 0`;; (* provable since subtraction is implemented via "cut-off" for `num`s *)
ARITH_RULE `x - (x - 1) = 0`;; (* a contraddiction *)


(* ========================================================================= *)
(* 4. Propositional logic                                                    *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Quale dei seguenti operatori binari ha priorita' piu' alta?               *)
(* Quali sono associativi a sinistra?                                        *)
(* ==>, <=>, /\, \/, =, +, - *, /                                            *)
(* ------------------------------------------------------------------------- *)

TAUT `x > 1 <=> x > 1`;; (* provable because asserting on the same term `x > 1` seen as a whole *)
ARITH_RULE `x > 1 <=> x > 1`;;

TAUT `x > 2 ==> x > 1`;; (* unsolved goal since TAUT doesn't know anything about `>` relation *)
ARITH_RULE `x > 2 ==> x > 1`;; (* while ARITH_RULE  does *)

ARITH_RULE `x:A = x`;;
TAUT `x:A = x`;;
TAUT `x = x:bool`;; (* since ` <=> ` is implemented as equality, this is what the printer really draws *)

(* ------------------------------------------------------------------------- *)
(* Qual e' la differenza tra questi tre teoremi?                             *)
(* ------------------------------------------------------------------------- *)

CONJ (ASSUME `p:bool`) (ASSUME `p:bool`);;
ASSUME `p /\ p`;; (* `p /\ p` is in the assumptions too, while the other have only `p` *)
MP (TAUT `p ==> p /\ p`) (ASSUME `p:bool`);;


(* ========================================================================= *)
(* 5. Equations and functions                                                *)
(* ========================================================================= *)

type_of `(<=>)`;;
type_of `(=)`;;
type_of `(=) 3`;;

type_of `~a,b+1`;;

mk_comb (`(<=>) p`, `1=0`);;
mk_comb (`(<=>) p`, `n:num`);; (* `n` is required to be a `:bool` *)
mk_comb (`(<=>) p`, `q:bool`);;
mk_comb (`(<=>) p`, `q`);; (* `q` cannot be any type *)
mk_comb (mk_comb (`(+)`,`1`), `2`);;
mk_comb (`(+) 1`, `2`);; (* equivalent to the previous one *)
REFL (mk_comb (mk_comb (`(+)`,`1`), `2`));;

mk_eq (`1`, `a+2`);;
mk_eq (`x`, `a+2`);; (* `x` should have type `:num` *)
mk_eq (`x:num`, `a+2`);; 
mk_eq (`1`, mk_comb (`(+) a`, `2`));;
ASSUME (mk_eq (`1`, `a+2`));;

CONJ_PAIR (ASSUME `x = y /\ q`);; (* `/\` has lower precedence respect to `=` *)
CONJ_PAIR (REFL `p /\ q`);; (* not a conjunction *)

MK_COMB (REFL `(+) 2`, ASSUME `x = 1`);;  (* x = 1 |- 2 + x = 2 + 1, combination happens only in the concl *)
MK_COMB (REFL `(+) 2`, ASSUME `x = y`);; (* `x` and `y` haven't type `:num` *)
MK_COMB (REFL `(+) 2`, ASSUME `x:num = y`);;
MK_COMB (REFL `(+) 2`, ARITH_RULE `3+2=5`);; (* |- 2 + 3 + 2 = 2 + 5, no assumptions created by ARITH_RULE *)
MK_COMB (MK_COMB (REFL `(+)`, REFL `x:num`), ARITH_RULE `1+1=2`);;

fst (dest_comb `1 + x`);; (* `(+) 1` *)
snd (dest_comb `1 + x`);; (* `x` *)

CONJ_PAIR `p /\ q`;; (* type checking error, a theorem is expected *)
CONJ_PAIR (ASSUME `p /\ q`);; (* thm * thm = (p /\ q |- p, p /\ q |- q) *)
fst (CONJ_PAIR (ASSUME `p /\ q`));;
concl (fst (CONJ_PAIR (ASSUME `p /\ q`)));; (* `p` *)


(* ========================================================================= *)
(* 6. Abstractions and quantifiers                                           *)
(* ========================================================================= *)

fst (dest_comb `!x. x=x`);; (* `(!)` *)
snd (dest_comb `!x. x=x`);; (* `\x. x = x` *)

subst [`1`,`x:num`; `2`,`a:num`] `\x. x + a`;; (* `\x. x + 2` *)
subst [`1`,`x:num`; `2`,`a:num`] `(\x. x + a) x`;; (*  `(\x. x + 2) 1`  *)

INST [`1`,`x:num`; `2`,`a:num`] (ARITH_RULE `!x. x + a = a + x`);; (* |- !x. x + 2 = 2 + x *)
INST [`1`,`x:num`] (REFL `x:num`);; (*  |- 1 = 1    *)
INST [`1`,`x:num`] (GEN `x:num` (REFL `x:num`));; (* |- !x. x = x  *)
INST [`1`,`x:num`] (GEN `x` (REFL `x:num`));; (* !x. 1 = 1, `x` gets associated an invented type variable  *)
SPEC `x:num` ADD_ASSOC;; (*  |- !n p. x + n + p = (x + n) + p *)
INST [`1`,`x:num`] (SPEC `x:num` ADD_ASSOC);; (* |- !n p. 1 + n + p = (1 + n) + p  *) 
(* Osservare la rinominazione n -> n' nei casi seguenti. *)
SPEC `n:num` ADD_ASSOC;; (* |- !n' p. n + n' + p = (n + n') + p   *)
INST [`1`,`n:num`] (SPEC `n:num` ADD_ASSOC);; (*  |- !n' p. 1 + n' + p = (1 + n') + p *)

(* ========================================================================= *)
(* 7. Conversions and rewriting                                              *)
(* ========================================================================= *)

BETA `(\y. x + y) y`;;
BETA_CONV `(\y. x + y) y`;;
BETA_CONV `(\x. x + y) y`;;
BETA_CONV `(\x y. x + y) y`;; (*  |- (\x y. x + y) y = (\y'. y + y')  *)
BETA_CONV `\x. (\y. x + y) 3`;; (* not a beta redex, ie not a combination *)
(ABS_CONV BETA_CONV) `\x. (\y. x + y) 3`;; (* |- (\x. (\y. x + y) 3) = (\x. x + 3) *)

MP (ARITH_RULE `x=0 ==> x >= 0`) (ASSUME `x = 0`);;         (*  x = 0 |- x >= 0 *)
MATCH_MP (ARITH_RULE `x=0 ==> x >= 0`) (ASSUME `x = 0`);;       (*  x = 0 |- x >= 0 *)
MATCH_MP (ARITH_RULE `y=0 ==> y >= 0`) (ASSUME `x EXP 2 = 0`);; (*  x EXP 2 = 0 |- x EXP 2 >= 0, by matching `y` to ` x EXP 2 `   *)
MATCH_MP (ARITH_RULE `!x. x=0 ==> x >= 0`) (ASSUME `x = 0`);;
MP (ARITH_RULE `!y. y = 0 ==> y >= 0`) (ASSUME `x = 0`);; (* MP doesn't match universally quantified variables *)

(* ------------------------------------------------------------------------- *)
(* Dimostrare il teorema                                                     *)
(* |- 1 + (\y. f y) z = 1 + f z                                              *)
(* (usare BETA_CONV con uno dei conversionals applicati al primo membro.)    *)
(* ------------------------------------------------------------------------- *)
RAND_CONV BETA_CONV `1 + (\y. f y) z`

(* ------------------------------------------------------------------------- *)
(* Dimostrare il teorema                                                     *)
(* |- x + y + z = z + y + x;;                                                *)
(* usando ADD_SYM e le conversioni (e senza usare ARITH_RULE).               *)
(* ------------------------------------------------------------------------- *)
let SWAP_FIRST_THIRD_AUGENDS_CONV = 
    let swap_in_triple_sum term = 
        let applied_operator, second_operand = dest_comb term in 
        let first_operator = rand applied_operator in 
        SPECL [first_operator; second_operand]  ADD_SYM 
    in let second_step term =  
        let y_plus_z_plus_operator, _ = dest_comb term in 
        let y_plus_z_tm = rand y_plus_z_plus_operator in 
        let z_plus_y_th = SPECL [rand (rator y_plus_z_tm); rand y_plus_z_tm]  ADD_SYM in
        MK_COMB (MK_COMB (REFL `(+):num->num->num`, z_plus_y_th), REFL `x:num`) 
    in let ADD_ASSOC_SYM = GSYM ADD_ASSOC
    in let third_step term = SPECL [rand (rator (rand (rator term))); 
                                    rand (rand (rator term)); 
                                    rand term] ADD_ASSOC_SYM
    in (REFL THENC swap_in_triple_sum THENC second_step THENC third_step);; 

SWAP_FIRST_THIRD_AUGENDS_CONV `x + y + z`;;

(* ------------------------------------------------------------------------- *)
(* Dimostrare il teorema                                                     *)
(* |- 2 EXP (2 EXP (2 EXP 2)) = 65536                                        *)
(* usando NUM_EXP_CONV (senza usare ARITH_RULE, NUM_REDUCE_CONV) .           *)
(* ------------------------------------------------------------------------- *)
 (((RAND_CONV o RAND_CONV) NUM_EXP_CONV) 
    THENC (RAND_CONV NUM_EXP_CONV) 
    THENC NUM_EXP_CONV) `2 EXP (2 EXP (2 EXP 2))`;;

(*
 the following is simpler and ones not so different from the others since
 no one application fo NUM_EXP_CONV doesn't create a new term containing EXP itself
 *)
DEPTH_CONV NUM_EXP_CONV `2 EXP (2 EXP (2 EXP 2))`;;
REDEPTH_CONV NUM_EXP_CONV `2 EXP (2 EXP (2 EXP 2))`;;
TOP_DEPTH_CONV NUM_EXP_CONV `2 EXP (2 EXP (2 EXP 2))`;;

(* ------------------------------------------------------------------------- *)
(* Dimostrare il teorema                                                     *)
(* |- 2 EXP (2 EXP (2 EXP (2 EXP 2))) EXP 0 = 1                              *)
(* Si osservi che la dimostrazione con NUM_EXP_CONV richiede molto tempo di  *)
(* calcolo.  Cercare una dimostrazione computazionalmente efficiente usando  *)
(* il teorema EXP.                                                           *)
(* ------------------------------------------------------------------------- *)
let EXP_ZERO_CONV term = 
    let case_m_exp_zero_th = fst (CONJ_PAIR EXP) in 
    let m_tm = rand (rator term) in 
    let spec_EXP_th = SPEC m_tm case_m_exp_zero_th in spec_EXP_th;;

EXP_ZERO_CONV `2 EXP (2 EXP (2 EXP (2 EXP 2))) EXP 0`;; 

(* ------------------------------------------------------------------------- *)
(* Qual e' il risultato dei seguenti comandi?                                *)
(* Quali riscritture avvengono durante l'esecuzione dei seguenti comandi e   *)
(* in quale ordine?                                                          *)
(* ------------------------------------------------------------------------- *)

REWRITE_CONV [] `if x /\ T <=> x then (!x. F ==> x+1=2) else y \/ F`;;
REWRITE_CONV [ASSUME `0+0+0=0`] `0+0 = 0+0+0`;; (* 0 + 0 + 0 = 0 |- 0 + 0 = 0 + 0 + 0 <=> 0 + 0 = 0 *)
REWRITE_CONV [ASSUME `0+0+0=0`] `0+0+0+0+0 = 0+0+0`;; (* 0 + 0 + 0 = 0 |- 0 + 0 + 0 + 0 + 0 = 0 + 0 + 0 <=> T *)
REWRITE_CONV [ARITH_RULE `0+0+0=0`] `0+0 = 0+0+0`;; (* |- 0 + 0 = 0 + 0 + 0 <=> 0 + 0 = 0  *)
REWRITE_CONV [ASSUME `!a b c. a+b+c=0`] `0+0+0+0+0 = 0+0+0`;; (* !a b c. a + b + c = 0 |- 0 + 0 + 0 + 0 + 0 = 0 + 0 + 0 <=> T *)


(* ========================================================================= *)
(* 8. Tactics and tacticals                                                  *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Cercare di capire il funzionamento delle seguenti dimostrazioni           *)
(* interattive.  Per le tattiche che non si conoscono usare la Very Quick    *)
(* Reference Guide e/o la documentazione in linear (help "....")             *)
(* ------------------------------------------------------------------------- *)

(* ------------------------------------------------------------------------- *)
(* Esempio 1.                                                                *)
(* Dimostrazione di   |- 2+2=4 /\ 2<3   in vari modi possibili.              *)
(* ------------------------------------------------------------------------- *)

g `2+2=4 /\ 2<3`;;
e CONJ_TAC;;
e (CONV_TAC (LAND_CONV NUM_ADD_CONV));;
e REFL_TAC;;
e (CONV_TAC NUM_LT_CONV);;

g `2+2=4 /\ 2<3`;;
e (CONV_TAC (BINOP_CONV NUM_REDUCE_CONV));;
e (REWRITE_TAC[]);;  (oppure CONV_TAC TAUT  OPPURE MESON_TAC[])

g `2+2=4 /\ 2<3`;;
e (CONV_TAC NUM_REDUCE_CONV);;  (* Oppure NUM_REDUCE_TAC *)

g `2+2=4 /\ 2<3`;;
e (CONV_TAC ARITH_RULE);;  (* Oppure ARITH_TAC *)

(* ------------------------------------------------------------------------- *)
(* esempio 2.                                                                *)
(* Dimostrazione di   |- 0=1 ==> 1=0   in vari modi possibili.               *)
(* ------------------------------------------------------------------------- *)

g `0=1 ==> 1=0`;;
(* Dimostrazioni compatte, costituite da una sola riga: *)
e ARITH_TAC;;
e (CONV_TAC NUM_REDUCE_CONV);;
e (REWRITE_TAC[EQ_SYM_EQ]);;
e (SIMP_TAC[]);;
e (MESON_TAC[]);;

(* ------------------------------------------------------------------------- *)
(* Altre dimostrazioni di   |- 0=1 ==> 1=0  .                                *)
(* ------------------------------------------------------------------------- *)

g `0=1 ==> 1=0`;;
e DISCH_TAC;;
e (ASM_REWRITE_TAC[]);;

g `0=1 ==> 1=0`;;
e DISCH_TAC;;
e (CONV_TAC (REWR_CONV EQ_SYM_EQ));;
e (FIRST_ASSUM ACCEPT_TAC);;

g `0=1 ==> 1=0`;;
e (DISCH_THEN ASSUME_TAC);;
e (FIRST_ASSUM (ACCEPT_TAC o GSYM));;

g `0=1 ==> 1=0`;;
e (DISCH_THEN (ASSUME_TAC o GSYM));;
e (FIRST_ASSUM ACCEPT_TAC);;

g `0=1 ==> 1=0`;;
e DISCH_TAC;;
e (FIRST_ASSUM (ASSUME_TAC o GSYM));;
e (FIRST_ASSUM MP_TAC);;
e (CONV_TAC TAUT);;

g `0=1 ==> 1=0`;;
e (DISCH_THEN (ACCEPT_TAC o GSYM));;

(* ------------------------------------------------------------------------- *)
(* La precedente dimostrazione interattiva corrispode alla seguente          *)
(* dimostrazione non interattiva                                             *)
(* ------------------------------------------------------------------------- *)

DISCH_ALL (GSYM (ASSUME `0=1`));;

(* Versioni piu' esplicita della precedente dimostrazione. *)
g `0=1 ==> 1=0`;;
e (DISCH_THEN (fun th -> ASSUME_TAC th));;
e (FIRST_ASSUM (fun th -> ACCEPT_TAC (GSYM th)));;

g `0=1 ==> 1=0`;;
e (DISCH_THEN (fun x -> ASSUME_TAC (ASSUME `0=1`)));;
e (FIRST_ASSUM (fun x -> ACCEPT_TAC (GSYM (ASSUME `0=1`))));;

(* ------------------------------------------------------------------------- *)
(* Oltre ad ACCEPT_TAC c'e' MATCH_ACCEPT_TAC                                 *)
(* Esempio di uso di MATCH_ACCEPT_TAC                                        *)
(* ------------------------------------------------------------------------- *)

g `(!x:num. x = x) ==> 0 = 0`;;
e (DISCH_THEN MATCH_ACCEPT_TAC);;

(* ------------------------------------------------------------------------- *)
(* esempio 3.                                                                *)
(* ------------------------------------------------------------------------- *)

g `p ==> p /\ p`;;
e (CONV_TAC TAUT);;
e (MESON_TAC[]);;
e (REWRITE_TAC[]);;

g `p ==> p /\ p`;;
e DISCH_TAC;;
(* Volendo ASM_REWRITE_TAC[] oppure ASM_MESON_TAC[] *)
e CONJ_TAC;;
e (FIRST_ASSUM ACCEPT_TAC);;  (* Oppure e (ACCEPT_TAC (ASSUME `p:bool`));; *)
e (FIRST_ASSUM ACCEPT_TAC);;
(* CVD *)

g `p ==> p \/ q`;;
e DISCH_TAC;;
e (DISJ1_TAC);;
e (FIRST_ASSUM ACCEPT_TAC);;
(* CVD *)

(* ------------------------------------------------------------------------- *)
(* esempio 4.                                                                *)
(* ------------------------------------------------------------------------- *)

g `p \/ q <=> q \/ p`;;
e EQ_TAC;;
e (DISCH_THEN DISJ_CASES_TAC);;
e DISJ2_TAC;;
e (FIRST_ASSUM ACCEPT_TAC);;
e DISJ1_TAC;;
e (FIRST_ASSUM ACCEPT_TAC);;

g `p \/ q <=> q \/ p`;;
e EQ_TAC;;
e STRIP_TAC;;
e (ASM_REWRITE_TAC[]);;
e (ASM_REWRITE_TAC[]);;
e STRIP_TAC;;
e (ASM_REWRITE_TAC[]);;
e (ASM_REWRITE_TAC[]);;
g `p \/ q <=> q \/ p`;;
e (EQ_TAC THEN STRIP_TAC THEN ASM_REWRITE_TAC[]);;

(* ------------------------------------------------------------------------- *)
(* esempio 5.                                                                *)
(* ------------------------------------------------------------------------- *)

g `!a b. a - b = 0 \/ b - a = 0`;;
e (REPEAT GEN_TAC);;
e (DISJ_CASES_TAC (SPECL [`a:num`;`b:num`] LE_CASES));;
e DISJ1_TAC;;
e (ASM_REWRITE_TAC[SUB_EQ_0]);;
e DISJ2_TAC;;
e (ASM_REWRITE_TAC[SUB_EQ_0]);;

g `!a b. a - b = 0 \/ b - a = 0`;;
e (REPEAT GEN_TAC THEN
   DISJ_CASES_TAC (SPECL [`a:num`;`b:num`] LE_CASES) THEN
   ASM_REWRITE_TAC[SUB_EQ_0]);;

g `!a b. a - b = 0 \/ b - a = 0`;;
e (MESON_TAC[LE_CASES; SUB_EQ_0]);;

(* ------------------------------------------------------------------------- *)
(* Enunciare e dimostrare il seguente teorema:                               *)
(* "La somma degli interi da 1 a n maggiore o uguale ad n."                  *)
(* ------------------------------------------------------------------------- *)
g `(!)(\n. nsum (1..n) (\i. i) >= n)`;;
e (MATCH_MP_TAC num_INDUCTION);;
e (REWRITE_TAC [NSUM_CLAUSES_NUMSEG]);;
(*
 The following one doesn't make any advantage respect REWRITE_TAC,
 since the context haven't rewriting information SIMP_TAC could use for.
e (SIMP_TAC [NSUM_CLAUSES_NUMSEG]);;
 *)
e ARITH_TAC;;

let SUM_ONE_UPTO_N_GREATER_THAN_N = 
    prove (`(!)(\n. nsum (1..n) (\i. i) >= n)`,
        (MATCH_MP_TAC num_INDUCTION) 
        THEN (REWRITE_TAC [NSUM_CLAUSES_NUMSEG])
        THEN ARITH_TAC);;

(* ------------------------------------------------------------------------- *)
(* Rifare parte della teoria dei numeri pari e dispari.                      *)
(*                                                                           *)
(* Formalizzare le seguenti definizioni e teoremi:                           *)
(* Definire il predicato `PARI` come segue: Un numero e' pari se e' il       *)
(*   doppio di un altro numero.                                              *)
(* Definire il predicato `DISPARI` come segue: Un numero e' dispare se       *)
(*   e' il successore del doppio di un altro numero.                         *)
(* Thm: Zero e' pari poiche' e' il doppio di zero.                           *)
(* Thm: Zero non e' dispari.                                                 *)
(* Thm: se n e' pari allora n+1 e' dispari.                                  *)
(* Thm: se n e' dispari allora n+1 e' spari.                                 *)
(* Thm: Un numero non dispari e' pari.                                       *)
(* Thm: Un numero non pari e' dispari.                                       *)
(* Thm: Ogni numero e' pari o dispari.                                       *)
(* Thm: n+2 e' pari se e solo se n e' pari.                                  *)
(* Thm: n+2 e' dispari se e solo se n e' dispari.                            *)
(* ------------------------------------------------------------------------- *)
let PARI = new_definition `!n. PARI n <=> (?m. n = 2*m)`;;
let DISPARI = new_definition `!n. DISPARI n <=> (?m. n = SUC (2*m))`;;

let PARI_CONV = REWR_CONV PARI;;
let DISPARI_CONV = REWR_CONV DISPARI;;

let ZERO_IS_PARI = 
    prove (`PARI 0`, 
        (REWRITE_TAC [PARI])
        THEN (EXISTS_TAC `0`)
        THEN ARITH_TAC);;

let ZERO_IS_NOT_DISPARI =
    prove (`~ DISPARI 0`,
        REWRITE_TAC [DISPARI]
        THEN STRIP_TAC
        THEN FIRST_X_ASSUM MP_TAC 
        THEN ARITH_TAC);;

let N_PARI_IMP_SUC_N_DISPARI = 
    prove (` !n. PARI n ==> DISPARI (SUC n)`,
        REWRITE_TAC [PARI; DISPARI]
        THEN INDUCT_TAC
        THENL [   
            DISCH_TAC THEN (EXISTS_TAC `0`) THEN ARITH_TAC; 
            DISCH_TAC THEN (REWRITE_TAC [SUC_INJ]) THEN (ASM_REWRITE_TAC []) ]);;

let N_DISPARI_IMP_SUC_N_PARI = 
    prove (` !n. DISPARI n ==> PARI (SUC n)`,
        REWRITE_TAC [PARI; DISPARI]
        THEN INDUCT_TAC
        THENL [   
            ARITH_TAC; 
            (REWRITE_TAC [SUC_INJ; ADD1]) 
            THEN DISCH_TAC 
            EXISTS_TAC `(n DIV 2) + 1`
REWRITE_TAC [LEFT_ADD_DISTRIB;ADD_AC;MULT_2 ]
NUM_REDUCE_TAC
CONV_TAC (RAND_CONV (REWR_CONV ADD_ASSOC))
MATCH_MP_TAC (ARITH_RULE `!n m. n = m  ==> n+2 = m+2`)
(* the following can be factored out in order to prove `n = n DIV 2 + n DIV 2` *)
CONV_TAC (RAND_CONV (REWR_CONV (GSYM MULT_2)))
(* till here steps are correct, but I can't close the proof *)
ASSUME_TAC (ARITH_RULE `~(2 = 0)`)
FIRST_X_ASSUM (MP_TAC o (MP (DISCH `~(2 = 0)` (SYM (UNDISCH (SPECL [`2`;`n:num`] DIV_MULT))))))
DISCH_TAC
ASM_REWRITE_TAC []



CONJ_TAC
g `m * n DIV r = (m * n) DIV r`;;
STRIP_ASSUME_TAC MULT_CLAUSES

REWRITE_TAC[DIVISION]
(* DIV_MULT is an implication *)
`!n m. n * (m DIV n) = m`
dest_comb `3+4 DIV 2`
REWR_CONV ADD_ASSOC `(a+b) + ((c + d) + e) + f + g + h`;;
REWR_CONV ADD_ASSOC `((a + b) + (c + d) + e) + f + g + h`;;
REWR_CONV ADD_ASSOC `(((a + b) + (c + d) + e) + f) + g + h`;;
(* the following causes error, since ADD_ASSOC cannot be applied *)
REWR_CONV ADD_ASSOC `((((a + b) + (c + d) + e) + f) + g) + h`;; 
            

(* Thm: Un numero non dispari e' pari.                                       *)
prove (`!n. ~(DISPARI n) ==> PARI n`,
        REWRITE_TAC [PARI; DISPARI]
        INDUCT_TAC
            STRIP_TAC THEN EXISTS_TAC `0` THEN ARITH_TAC

            (REWRITE_TAC [SUC_INJ; ADD1]) 
            STRIP_TAC
            EXISTS_TAC `(n + 1) DIV 2`
            CONV_TAC (RAND_CONV (fun tm -> let div_comb = mk_comb (`\n. n DIV 2`, tm) in BETA_CONV div_comb))
                            THENC REWR_CONV 
GSYM BETA_THM
            CONV_TAC (REWR_CONV )
SUBGOAL_THEN
            CONV_TAC ( (CONV_RULE (BINOP_CONV BETA_CONV)) o (AP_TERM `\n. n DIV 2`) o ASSUME  ) `n + 1 = 2 * (n + 1) DIV 2` 
MK_COMB (REFL )
            CONV_TAC (RAND_CONV (REWR_CONV ADD_ASSOC))
            ARITH_TAC
            CONV_RULE
INST


prove (`~(c = 0) ==> (a * b) DIV c = a * (b DIV c)`,
        DISCH_TAC
        MATCH_MP_TAC DIV_UNIQ
        EXISTS_TAC `0`
        STRIP_TAC
        REWRITE_TAC [ADD_0]

CONV_TAC (RAND_CONV (REWR_CONV (GSYM MULT_ASSOC)))
REWRITE_TAC [EQ_MULT_LCANCEL]
DISJ2_TAC
CONV_TAC (RAND_CONV (REWR_CONV (GSYM MULT_SYM)))
FIRST_X_ASSUM (fun th -> REWRITE_TAC [SPEC `b:num` (GSYM (MATCH_MP DIV_MULT th (*(ASSUME `~(c = 0)`)*)))])




BETA_TAC



(* ========================================================================= *)
(* 9. HOL number systems                                                     *)
(* ========================================================================= *)

prioritize_real();;
type_of `2`;;
type_of `x+2`;;
type_of `&2`;;
type_of `3 DIV 2`;;
type_of `3/2`;;
type_of `&3/&2`;;
type_of `&3 / &2`;;

let DOUBLE = new_definition
  `DOUBLE x = x + x`;;

type_of `DOUBLE`;;

prioritize_int();;
type_of `DOUBLE(&2)`;;
type_of `DOUBLE(&n) + n`;;

let NDOUBLE = new_definition
  `NDOUBLE (n:num) = n+n`;;

type_of `NDOUBLE`;;

g `!n. NDOUBLE n = DOUBLE n`;;

(* ------------------------------------------------------------------------- *)
(* Aggiustare e dimostrare l'enunciato precedente.                           *)
(* ------------------------------------------------------------------------- *)
